
-- ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
-- ‚ïë  RELATORIOS PARA A GEST√ÉO DA CLINICA  ‚ïë
-- ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù


-- [=========== RELATORIOS PARA O USUARIO ATENDENTE üßë‚Äçüíª ===========]

-- (1) CONTROLE BASICO DE ESTOQUE DE FARMACOS
CREATE OR REPLACE FUNCTION RELATORIO_ESTOQUE_FARMACOS()
RETURNS TABLE (
	NOME_FARMACO VARCHAR,
	QUANTIDADE INT,
	VALIDADE DATE,
	DIAS_RESTANTES_VENC INT,
	STATUS_ESTOQUE TEXT
) 
SECURITY DEFINER
AS $$
BEGIN
	RETURN QUERY
	SELECT
		F.NOME AS NOME_FARMACO,
		F.QUANT AS QUANTIDADE,
		F.VALIDADE AS VALIDADE,
		GREATEST((F.VALIDADE - CURRENT_DATE),0) AS DIAS_RESTANTES_VENC,
		CASE
			WHEN F.VALIDADE <= CURRENT_DATE THEN
				'‚ùå Vencido'
			WHEN (F.VALIDADE - CURRENT_DATE) <= 90 AND F.QUANT <= 10 THEN
				'‚ö†Ô∏è Critico: Farmaco proximo do vencimento e com baixo estoque...'
			WHEN (F.VALIDADE - CURRENT_DATE) <= 90 THEN
				'‚ö†Ô∏è Farmaco proximo do vencimento'
			WHEN F.QUANT <= 10 THEN
				'‚ö†Ô∏è Farmaco com baixo estoque...'
			ELSE
				'‚úÖ Em estoque'
				
		 END AS STATUS_ESTOQUE
		
	FROM FARMACO F
	ORDER BY STATUS_ESTOQUE DESC;
	
END;
$$ LANGUAGE PLPGSQL;

--- (2) RELATORIO DE RECEITA DETALHADA POR SERVICO/ESPECIALIDADE
CREATE OR REPLACE FUNCTION RELATORIO_FATURAMENTO_DA_CLINICA(
	P_DATA_INICIO TEXT DEFAULT NULL,
	P_DATA_FINAL TEXT DEFAULT NULL
) RETURNS TABLE (
	DATA_SERVICO TEXT,
	TIPO_SERVICO TEXT,
	NOME_SERVICO TEXT,
	QUANTIDADE_VENDIDA BIGINT,
	FATURAMENTO_BRUTO FLOAT
) 
SECURITY DEFINER
AS $$
DECLARE
	VAR_PERIODO_INICIO DATE;
	VAR_PERIODO_FINAL DATE;
BEGIN

	IF (P_DATA_INICIO IS NOT NULL AND P_DATA_INICIO <> '') AND (P_DATA_FINAL IS NULL OR P_DATA_FINAL = '') THEN
		RAISE EXCEPTION '‚ùå Para filtrar por um intervalo, a data final tamb√©m deve ser fornecida.';
	ELSIF (P_DATA_FINAL IS NOT NULL AND P_DATA_FINAL <> '') AND (P_DATA_INICIO IS NULL OR P_DATA_INICIO = '') THEN
		RAISE EXCEPTION '‚ùå Para filtrar por um intervalo, a data inicio tamb√©m deve ser fornecida.';
	END IF;
	
	BEGIN
		IF P_DATA_INICIO IS NOT NULL THEN
			VAR_PERIODO_INICIO := TO_DATE(P_DATA_INICIO, 'YYYY-MM-DD');
		END IF;
	EXCEPTION WHEN OTHERS THEN
		RAISE EXCEPTION '‚ùå Formato de data de inicio invalido. Use o formato AAAA-MM-DD.';
	END;

	BEGIN
		IF P_DATA_FINAL IS NOT NULL THEN
			VAR_PERIODO_FINAL := TO_DATE(P_DATA_FINAL, 'YYYY-MM-DD');
		END IF;
	EXCEPTION WHEN OTHERS THEN
		RAISE EXCEPTION '‚ùå Formato de data final invalido. Use o formato AAAA-MM-DD.';
	END;

	IF VAR_PERIODO_INICIO > VAR_PERIODO_FINAL THEN
		RAISE EXCEPTION '‚ùå Insira a data de inicio MENOR que a data final.';
	END IF;

	RETURN QUERY
	WITH FINANCEIRO_TOTAIS AS (
		SELECT
			CASE
				WHEN VAR_PERIODO_INICIO IS NULL THEN
					'‚úñÔ∏è Nenhuma data selecionada.'
				ELSE TO_CHAR(VAR_PERIODO_INICIO, 'üìÖ DD/MM/YYYY') || ' a ' || TO_CHAR(VAR_PERIODO_FINAL, 'DD/MM/YYYY')
			END AS DATA_SERVICO,
			'üßë‚Äç‚öïÔ∏è Consultas' AS TIPO,
			ESP.NOME,
			ESP.VALOR
		FROM CONSULTA C
			JOIN VETERINARIO VET ON C.COD_VET = VET.COD_VET
			JOIN ESPECIALIDADE ESP ON VET.COD_ESP = ESP.COD_ESP
		WHERE VAR_PERIODO_INICIO IS NULL OR C.DATA BETWEEN VAR_PERIODO_INICIO AND VAR_PERIODO_FINAL

		UNION ALL

		SELECT
			CASE
				WHEN VAR_PERIODO_INICIO IS NULL THEN
					'‚úñÔ∏è Nenhuma data selecionada.'
				ELSE TO_CHAR(VAR_PERIODO_INICIO, 'üìÖ DD/MM/YYYY') || ' a ' || TO_CHAR(VAR_PERIODO_FINAL, 'DD/MM/YYYY')
			END AS DATA_SERVICO,
			'üíä Medicamentos' AS TIPO,
			F.NOME,
			F.VALOR
		FROM CONSULTA C
			JOIN MEDICACAO M ON C.COD_MEDICACAO = M.COD_MEDICACAO
			JOIN FARMACO F ON M.COD_FARM = F.COD_FARM
		WHERE VAR_PERIODO_INICIO IS NULL OR C.DATA BETWEEN VAR_PERIODO_INICIO AND VAR_PERIODO_FINAL

		UNION ALL

		SELECT
			CASE
				WHEN VAR_PERIODO_INICIO IS NULL THEN
					'‚úñÔ∏è Nenhuma data selecionada.'
				ELSE TO_CHAR(VAR_PERIODO_INICIO, 'üìÖ DD/MM/YYYY') || ' a ' || TO_CHAR(VAR_PERIODO_FINAL, 'DD/MM/YYYY')
			END AS DATA_SERVICO,
			'üíâ Vacinacao' AS TIPO,
			F.NOME,
			F.VALOR
		FROM VACINACAO VAC
			JOIN FARMACO F ON VAC.COD_FARM = F.COD_FARM
		WHERE VAR_PERIODO_INICIO IS NULL OR VAC.DATA BETWEEN VAR_PERIODO_INICIO AND VAR_PERIODO_FINAL
	)

	SELECT
		FT.DATA_SERVICO,
		FT.TIPO,
		FT.NOME::TEXT,
		COUNT(*) AS QUANTIDADE_VENDIDA,
		SUM(FT.VALOR) AS FATURAMENTO_BRUTO
	FROM FINANCEIRO_TOTAIS FT
	GROUP BY
		FT.DATA_SERVICO,FT.TIPO,FT.NOME
	ORDER BY
		FT.TIPO, SUM(FT.VALOR) DESC;
END;
$$ LANGUAGE PLPGSQL;


--- (3) AGENDA DIARIA DE CONSULTAS E VACINA√áOES (PARAMETROS: INTERVALO DE TEMPO)

CREATE OR REPLACE FUNCTION RELATORIO_AGENDA_DO_DIA (
	P_DATA_INICIO TEXT DEFAULT NULL,
	P_DATA_FINAL TEXT DEFAULT NULL
) RETURNS TABLE (
	DATA TEXT,
	HORA_AGENDAMENTO TIME,
	TIPO_SERVICO TEXT,
	NOME_PET VARCHAR(50),
	NOME_TUTOR VARCHAR(50),
	FONE_TUTOR VARCHAR(15),
	NOME_VETERINARIO VARCHAR(50)
) 
SECURITY DEFINER
AS $$
DECLARE
	VAR_PERIODO_INICIO DATE;
	VAR_PERIODO_FINAL DATE;
BEGIN
	IF (P_DATA_INICIO IS NOT NULL AND P_DATA_INICIO <> '') AND (P_DATA_FINAL IS NULL OR P_DATA_FINAL = '') THEN
		RAISE EXCEPTION '‚ùå Para filtrar por um intervalo, a data final tamb√©m deve ser fornecida.';
	ELSIF (P_DATA_FINAL IS NOT NULL AND P_DATA_FINAL <> '') AND (P_DATA_INICIO IS NULL OR P_DATA_INICIO = '') THEN
		RAISE EXCEPTION '‚ùå Para filtrar por um intervalo, a data inicio tamb√©m deve ser fornecida.';
	END IF;

	BEGIN
		IF P_DATA_INICIO IS NOT NULL THEN
			VAR_PERIODO_INICIO := TO_DATE(P_DATA_INICIO, 'YYYY-MM-DD');
		ELSIF P_DATA_INICIO IS NULL THEN
			VAR_PERIODO_INICIO := CURRENT_DATE;
		END IF;
	EXCEPTION WHEN OTHERS THEN
		RAISE EXCEPTION '‚ùå Formato de data de inicio invalido. Use o formato AAAA-MM-DD.';
	END;

	BEGIN
		IF P_DATA_FINAL IS NOT NULL THEN
			VAR_PERIODO_FINAL := TO_DATE(P_DATA_FINAL, 'YYYY-MM-DD');
		ELSIF P_DATA_FINAL IS NULL THEN
			VAR_PERIODO_FINAL := CURRENT_DATE;
		END IF;
	EXCEPTION WHEN OTHERS THEN
		RAISE EXCEPTION '‚ùå Formato de data final invalido. Use o formato AAAA-MM-DD.';
	END;

	IF VAR_PERIODO_INICIO > VAR_PERIODO_FINAL THEN
		RAISE EXCEPTION '‚ùå Insira a data de inicio MENOR que a data final.';
	END IF;

	RETURN QUERY
	WITH AGENDAMENTO AS (
		SELECT
			CASE
				WHEN P_DATA_INICIO IS NULL THEN 'üìÖ Hoje'
				ELSE TO_CHAR(VAR_PERIODO_INICIO, 'üïí DD/MM/YYYY') || ' a ' || TO_CHAR(VAR_PERIODO_FINAL, 'DD/MM/YYYY')
			END AS DATA,
			C.HORA,
			'üßë‚Äç‚öïÔ∏è Consulta' AS TIPO_SERVICO,
			P.NOME AS NOME_PET,
			T.NOME AS NOME_TUTOR,
			T.FONE,
			VET.NOME AS NOME_VETERINARIO
		FROM CONSULTA C
			JOIN VETERINARIO VET ON C.COD_VET = VET.COD_VET
			JOIN VINCULO V ON C.COD_VINCULO = V.COD_VINCULO
			JOIN PET P ON V.COD_PET = P.COD_PET
			JOIN TUTOR T ON P.COD_TUTOR = T.COD_TUTOR
		WHERE C.DATA BETWEEN VAR_PERIODO_INICIO AND VAR_PERIODO_FINAL

		UNION ALL

		SELECT
			CASE
				WHEN P_DATA_INICIO IS NULL THEN 'üìÖ Hoje'
				ELSE TO_CHAR(VAR_PERIODO_INICIO, 'üïí DD/MM/YYYY') || ' a ' || TO_CHAR(VAR_PERIODO_FINAL, 'DD/MM/YYYY')
			END AS DATA,
			VAC.HORA,
			'üíâ Vacinacao' AS TIPO_SERVICO,
			P.NOME AS NOME_PET,
			T.NOME AS NOME_TUTOR,
			T.FONE,
			VET.NOME AS NOME_VETERINARIO
		FROM VACINACAO VAC
			JOIN VETERINARIO VET ON VAC.COD_VET = VET.COD_VET
			JOIN VINCULO V ON VAC.COD_VINCULO = V.COD_VINCULO
			JOIN PET P ON V.COD_PET = P.COD_PET
			JOIN TUTOR T ON P.COD_TUTOR = T.COD_TUTOR
		WHERE VAC.DATA BETWEEN VAR_PERIODO_INICIO AND VAR_PERIODO_FINAL
	)

	SELECT
		AG.DATA,
		AG.HORA,
		AG.TIPO_SERVICO,
		AG.NOME_PET,
		AG.NOME_TUTOR,
		AG.FONE,
		AG.NOME_VETERINARIO
	FROM AGENDAMENTO AG
	ORDER BY AG.HORA;
END;
$$ LANGUAGE PLPGSQL;


-- [=========== RELATORIOS PARA O USUARIO VETERINARIO üë®‚Äç‚öïÔ∏è ===========]

--- (1) HISTORICO CLINICO DO PACIENTE (PARAMETROS: NOME DO PET, CPF DO TUTOR)

CREATE OR REPLACE FUNCTION RELATORIO_HISTORICO_PACIENTE(
    P_NOME_PET VARCHAR,
    P_CPF_TUTOR VARCHAR
) RETURNS TABLE (
    TIPO_SERVICO VARCHAR(50),
    DATA DATE,
    HORA TIME,
    NOME_VETERINARIO_RESPONSAVEL VARCHAR(50),
    DIAGNOSTICO TEXT,
    NOME_FARMACO VARCHAR(50),
    NOME_PET_RETORNO VARCHAR(50),
    ESPECIE VARCHAR(50),
    PORTE VARCHAR(50),
	SEXO TEXT,
    IDADE TEXT
) 
SECURITY DEFINER
AS $$
DECLARE
    VAR_COD_PET INT;
BEGIN

	IF P_NOME_PET IS NULL OR P_NOME_PET = '' THEN
		RAISE EXCEPTION '‚ùå Insira o nome do pet.';
	ELSIF P_CPF_TUTOR IS NULL OR P_CPF_TUTOR = '' THEN
		RAISE EXCEPTION '‚ùå Insira o CPF do tutor.';
	END IF;
	
    VAR_COD_PET := BUSCAR_COD_PET(P_CPF_TUTOR, P_NOME_PET);

    RETURN QUERY
    SELECT
        'üßë‚Äç‚öïÔ∏èConsulta'::VARCHAR(50) AS TIPO_SERVICO,
        C.DATA,
        C.HORA,
        V.NOME AS NOME_VETERINARIO_RESPONSAVEL,
        C.DIAGNOSTICO,
        COALESCE(F.NOME, 'Nenhum f√°rmaco') AS NOME_FARMACO,
        P.NOME AS NOME_PET_RETORNO,
        P.ESPECIE,
        P.PORTE,
        CASE
			WHEN P.SEXO ILIKE 'F' THEN 'üö∫ Feminino'
			WHEN P.SEXO ILIKE 'M' THEN 'üöπ Masculino'
		END AS SEXO,
		TO_CHAR(AGE(CURRENT_DATE, P.DT_NASC), 'FMYYYY "anos, "FMMM "meses e "FMDD "dias"') AS IDADE
    FROM CONSULTA C
        LEFT JOIN MEDICACAO M ON C.COD_MEDICACAO = M.COD_MEDICACAO
        LEFT JOIN FARMACO F ON M.COD_FARM = F.COD_FARM
        JOIN VETERINARIO V ON C.COD_VET = V.COD_VET
        JOIN VINCULO VI ON VI.COD_VINCULO = C.COD_VINCULO
        JOIN PET P ON P.COD_PET = VI.COD_PET
    WHERE P.COD_PET = VAR_COD_PET

    UNION ALL

    SELECT
        'üíâVacina√ß√£o'::VARCHAR(50) AS TIPO_SERVICO,
        VAC.DATA,
        VAC.HORA,
        VET.NOME AS NOME_VETERINARIO_RESPONSAVEL,
        'Aplica√ß√£o de vacina'::VARCHAR(50) AS DIAGNOSTICO,
        COALESCE(F.NOME, 'Nenhum f√°rmaco') AS NOME_FARMACO,
        P.NOME AS NOME_PET_RETORNO,
        P.ESPECIE,
        P.PORTE,
        CASE
			WHEN P.SEXO ILIKE 'F' THEN 'üö∫ Feminino'
			WHEN P.SEXO ILIKE 'M' THEN 'üöπ Masculino'
		END AS SEXO,
		TO_CHAR(AGE(CURRENT_DATE, P.DT_NASC), 'FMYYYY "anos, "FMMM "meses e "FMDD "dias"') AS IDADE
    FROM VACINACAO VAC
        JOIN VINCULO VI ON VAC.COD_VINCULO = VI.COD_VINCULO
        JOIN PET P ON VI.COD_PET = P.COD_PET
        JOIN VETERINARIO VET ON VAC.COD_VET = VET.COD_VET
        JOIN FARMACO F ON VAC.COD_FARM = F.COD_FARM
    WHERE P.COD_PET = VAR_COD_PET;

END;
$$ LANGUAGE PLPGSQL;

--- (2) QUANTIDADE DE CONSULTAS E VACINA√áOES REALIZADAS DENTRO DE UM INTERVALO DE TEMPO (PARAMETROS: CRMV, INICIO DA DATA, FIM DA DATA)

CREATE OR REPLACE FUNCTION RELATORIO_CONS_VAC_REALIZADAS(
	P_CRMV VARCHAR(15),
	P_PERIODO_INICIO TEXT,
	P_PERIODO_FINAL TEXT
)
RETURNS TABLE (
	TIPO_SERVICO TEXT,
	NOME_VETERINARIO VARCHAR(50),
	QUANTIDADE_REALIZADA BIGINT,
	FATURAMENTO FLOAT,
	TICKET_MEDIO FLOAT,
	PERIODO_ANALISADO TEXT
) 
SECURITY DEFINER
AS $$
DECLARE
	VAR_COD_VET INT;
	VAR_PERIODO_INICIO DATE;
	VAR_PERIODO_FINAL DATE;
BEGIN

	IF P_CRMV IS NULL OR P_CRMV = '' THEN
		RAISE EXCEPTION '‚ùå Insira o CRMV.';
	END IF;

	IF (P_PERIODO_INICIO IS NOT NULL AND P_PERIODO_INICIO <> '') AND (P_PERIODO_FINAL IS NULL OR P_PERIODO_FINAL = '') THEN
		RAISE EXCEPTION '‚ùå Para filtrar por um intervalo, a data final tamb√©m deve ser fornecida.';
	ELSIF (P_PERIODO_FINAL IS NOT NULL AND P_PERIODO_FINAL <> '') AND (P_PERIODO_INICIO IS NULL OR P_PERIODO_INICIO = '') THEN
		RAISE EXCEPTION '‚ùå Para filtrar por um intervalo, a data inicio tamb√©m deve ser fornecida.';
	END IF;
	
	IF P_PERIODO_INICIO IS NULL OR P_PERIODO_INICIO = '' THEN
		RAISE EXCEPTION '‚ùå Insira a data de inicio.';
	END IF;

	BEGIN
		VAR_PERIODO_INICIO := TO_DATE(P_PERIODO_INICIO, 'YYYY-MM-DD');
	EXCEPTION WHEN OTHERS THEN
		RAISE EXCEPTION '‚ùå Formato de data de inicio invalido. Use o formato AAAA-MM-DD.';
	END;
	
	IF P_PERIODO_FINAL IS NULL OR P_PERIODO_FINAL = '' THEN
		RAISE EXCEPTION '‚ùå Insira a data final.';
	END IF;

	BEGIN
		VAR_PERIODO_FINAL := TO_DATE(P_PERIODO_FINAL, 'YYYY-MM-DD');
	EXCEPTION WHEN OTHERS THEN
		RAISE EXCEPTION '‚ùå Formato de data final invalido. Use o formato AAAA-MM-DD.';
	END;
	
	IF VAR_PERIODO_INICIO > VAR_PERIODO_FINAL THEN
		RAISE EXCEPTION '‚ùå Insira a data de inicio MENOR que a data final.';
	END IF;
	
	VAR_COD_VET := BUSCAR_COD_VET(P_CRMV);

	RETURN QUERY

	WITH SERVICOS_REALIZADOS AS (
		SELECT
    	'üßë‚Äç‚öïÔ∏èConsulta' AS TIPO,
    	C.COD_VET,
    	P.VALOR_TOTAL AS VALOR
		FROM CONSULTA C
			JOIN PAGAMENTO P ON C.COD_PAG = P.COD_PAG
		WHERE C.COD_VET = VAR_COD_VET AND C.DATA BETWEEN VAR_PERIODO_INICIO AND VAR_PERIODO_FINAL
		
		UNION ALL
		
		SELECT
		    'üíâVacinacao' AS TIPO,
			VAC.COD_VET,
		    P.VALOR_TOTAL AS VALOR
		FROM VACINACAO VAC
			JOIN PAGAMENTO P ON VAC.COD_PAG = P.COD_PAG
		WHERE VAC.COD_VET = VAR_COD_VET AND VAC.DATA BETWEEN VAR_PERIODO_INICIO AND VAR_PERIODO_FINAL	
	)

	SELECT
		S.TIPO AS TIPO_SERVICO,
		V.NOME AS NOME_VETERINARIO,
		COUNT(*) AS QUANTIDADE_REALIZADA,
		SUM(S.VALOR) AS FATURAMENTO,
		SUM(S.VALOR) / COUNT(*) AS TICKET_MEDIO,
		TO_CHAR(VAR_PERIODO_INICIO, 'DD/MM/YYYY') || ' a ' || TO_CHAR(VAR_PERIODO_FINAL, 'DD/MM/YYYY') AS PERIODO_ANALISADO
		
	FROM SERVICOS_REALIZADOS S
		JOIN VETERINARIO V ON V.COD_VET = S.COD_VET
	GROUP BY S.TIPO, V.NOME;
	
END;
$$ LANGUAGE PLPGSQL;


-- [=========== RELATORIOS PARA O USUARIO TUTOR üê∂ ===========]

--- (1) HISTORICO DE CONSULTAS/VACINACAO DE FORMA FILTRADA (PARAMETROS: CPF, NOME PET(OPCIOCAL), TIPO DE HISTORICO(VACINACAO/CONSULTA)(OPCIONAL))
CREATE OR REPLACE FUNCTION RELATORIO_HISTORICO_DO_SEU_PET(
	P_CPF VARCHAR(11),
	P_NOME_PET VARCHAR(50) DEFAULT NULL,
	P_TIPO_HISTORICO TEXT DEFAULT NULL
)
RETURNS TABLE (
	NOME_PET VARCHAR(50),
	TIPO_SERVICO TEXT,
	HORA_ATENDIMENTO TIME,
	DATA_ATENDIMENTO DATE,
	NOME_VETERINARIO VARCHAR(50),
	DESCRICAO_SERVICO TEXT,
	FARMACO_ASSOCIADO VARCHAR(50)
) 
SECURITY DEFINER
AS $$
DECLARE
	VAR_COD_TUTOR INT;
	VAR_COD_PET INT;
BEGIN

	IF P_CPF IS NULL OR P_CPF = '' THEN
		RAISE EXCEPTION '‚ùå Insira o seu CPF.';
	END IF;

	IF LENGTH(P_CPF) <> 11 THEN
		RAISE EXCEPTION '‚ùå Formato de CPF invalido. Insira 11 digitos, sem pontos ou tra√ßos.';
	END IF;

	VAR_COD_TUTOR := BUSCAR_COD_TUTOR(P_CPF);

	IF P_NOME_PET IS NOT NULL THEN 
		IF LENGTH(P_NOME_PET) > 50 THEN
			RAISE EXCEPTION '‚ùå O tamanho de nome PET EXCEDEU o limite. Insira um nome valido.';
		END IF;
		
		VAR_COD_PET := BUSCAR_COD_PET(P_CPF,P_NOME_PET);
	END IF;
	
	IF P_TIPO_HISTORICO IS NOT NULL AND (P_TIPO_HISTORICO NOT ILIKE 'Vacinacao' AND P_TIPO_HISTORICO NOT ILIKE 'Consulta') THEN
		RAISE EXCEPTION '‚ùå Tipo de historico inv√°lido. Informe "Consulta" ou "Vacinacao".';
	END IF;

	RETURN QUERY

	WITH HISTORICO_COMPLETO AS (
		SELECT
		P.NOME,
		'üßë‚Äç‚öïÔ∏èConsulta' AS TIPO_SERVICO,
		C.HORA,
		C.DATA,
		VET.NOME AS NOME_VETERINARIO,
		C.DIAGNOSTICO,
		COALESCE(F.NOME, 'Nenhum f√°rmaco') AS FARMACO_ASSOCIADO
		FROM CONSULTA C
			JOIN VINCULO V ON C.COD_VINCULO = V.COD_VINCULO
			JOIN PET P ON V.COD_PET = P.COD_PET
			JOIN TUTOR T ON T.COD_TUTOR = P.COD_TUTOR
			JOIN VETERINARIO VET ON C.COD_VET = VET.COD_VET
			LEFT JOIN MEDICACAO M ON M.COD_MEDICACAO = C.COD_MEDICACAO
			LEFT JOIN FARMACO F ON M.COD_FARM = F.COD_FARM
		WHERE T.COD_TUTOR = VAR_COD_TUTOR

		UNION ALL

		SELECT
			P.NOME,
			'üíâVacinacao' AS TIPO_SERVICO,
			VAC.HORA,
			VAC.DATA,
			VET.NOME AS NOME_VETERINARIO,
			'Aplicacao da vacina' AS DIAGNOSTICO,
			F.NOME AS FARMACO_ASSOCIADO
		FROM VACINACAO VAC
			JOIN VINCULO V ON VAC.COD_VINCULO = V.COD_VINCULO
			JOIN PET P ON V.COD_PET = P.COD_PET
			JOIN TUTOR T ON T.COD_TUTOR = P.COD_TUTOR
			JOIN VETERINARIO VET ON VAC.COD_VET = VET.COD_VET
			JOIN FARMACO F ON VAC.COD_FARM = F.COD_FARM
		WHERE T.COD_TUTOR = VAR_COD_TUTOR	
	)

	SELECT
		HC.NOME AS NOME_PET,
		HC.TIPO_SERVICO,
		HC.HORA AS HORA_ATENDIMENTO,
		HC.DATA AS DATA_ATENDIMENTO,
		HC.NOME_VETERINARIO,
		HC.DIAGNOSTICO,
		HC.FARMACO_ASSOCIADO
	FROM HISTORICO_COMPLETO HC
	WHERE (P_NOME_PET IS NULL OR HC.NOME ILIKE P_NOME_PET)
		AND (P_TIPO_HISTORICO IS NULL OR HC.TIPO_SERVICO ILIKE '%' || P_TIPO_HISTORICO || '%')
	ORDER BY
		HC.NOME,
		HC.HORA DESC,
		HC.DATA DESC;
	
END;
$$ LANGUAGE PLPGSQL;


--- (2) HISTORICO FINANCEIRO/TOTAL GASTO POR VACINACAO E CONSULTA(PARAMETROS: CPF)
CREATE OR REPLACE FUNCTION RELATORIO_SEUS_GASTOS(
	P_CPF VARCHAR(11),
	P_DATA_INICIO TEXT DEFAULT NULL,
	P_DATA_FINAL TEXT DEFAULT NULL
) RETURNS TABLE (
	DATA_SERVICO DATE,
	NOME_PET VARCHAR(50),
	DESCRICAO_SERVICO TEXT,
	VALOR_SEM_DESCONTO FLOAT,
	DESCONTO_PLANO FLOAT,
	VALOR_PAGO FLOAT
) 
SECURITY DEFINER
AS $$
DECLARE
	VAR_COD_TUTOR INT;
	VAR_PERIODO_INICIO DATE;
	VAR_PERIODO_FINAL DATE;
BEGIN
	IF P_CPF IS NULL OR P_CPF = '' THEN
		RAISE EXCEPTION '‚ùå Insira o seu CPF.';
	END IF;

	IF LENGTH(P_CPF) <> 11 THEN
		RAISE EXCEPTION '‚ùå Formato de CPF invalido. Insira 11 digitos, sem pontos ou tra√ßos.';
	END IF;

	IF (P_DATA_INICIO IS NOT NULL AND P_DATA_INICIO <> '') AND (P_DATA_FINAL IS NULL OR P_DATA_FINAL = '') THEN
		RAISE EXCEPTION '‚ùå Para filtrar por um intervalo, a data final tamb√©m deve ser fornecida.';
	ELSIF (P_DATA_FINAL IS NOT NULL AND P_DATA_FINAL <> '') AND (P_DATA_INICIO IS NULL OR P_DATA_INICIO = '') THEN
		RAISE EXCEPTION '‚ùå Para filtrar por um intervalo, a data inicio tamb√©m deve ser fornecida.';
	END IF;

	BEGIN
		IF P_DATA_INICIO IS NOT NULL THEN
			VAR_PERIODO_INICIO := TO_DATE(P_DATA_INICIO, 'YYYY-MM-DD');
		END IF;
	EXCEPTION WHEN OTHERS THEN
		RAISE EXCEPTION '‚ùå Formato de data de inicio invalido. Use o formato AAAA-MM-DD.';
	END;

	BEGIN
		IF P_DATA_FINAL IS NOT NULL THEN
			VAR_PERIODO_FINAL := TO_DATE(P_DATA_FINAL, 'YYYY-MM-DD');
		END IF;
	EXCEPTION WHEN OTHERS THEN
		RAISE EXCEPTION '‚ùå Formato de data final invalido. Use o formato AAAA-MM-DD.';
	END;
	
	IF VAR_PERIODO_INICIO > VAR_PERIODO_FINAL THEN
		RAISE EXCEPTION '‚ùå Insira a data de inicio MENOR que a data final.';
	END IF;

	VAR_COD_TUTOR := BUSCAR_COD_TUTOR(P_CPF);

	RETURN QUERY

	WITH GASTOS_TOTAIS AS (
		SELECT
			C.DATA,
			P.NOME,
			'üßë‚Äç‚öïÔ∏èConsulta - ' || E.NOME AS DESCRICAO,
			E.VALOR,
			PP.DESCONTO_CONSULTA AS DESCONTO_APLICADO,
			PAG.VALOR_TOTAL
		FROM CONSULTA C
			JOIN VINCULO V ON V.COD_VINCULO = C.COD_VINCULO
			JOIN PET P ON P.COD_PET = V.COD_PET
			JOIN VETERINARIO VET ON C.COD_VET = VET.COD_VET
			JOIN ESPECIALIDADE E ON E.COD_ESP = VET.COD_ESP
			JOIN PLANO_PET PP ON PP.COD_PLANO_PET = V.COD_PLANO_PET
			JOIN PAGAMENTO PAG ON PAG.COD_PAG = C.COD_PAG
		WHERE P.COD_TUTOR = VAR_COD_TUTOR AND ((VAR_PERIODO_INICIO IS NULL AND VAR_PERIODO_FINAL IS NULL) OR C.DATA BETWEEN VAR_PERIODO_INICIO AND VAR_PERIODO_FINAL)

		UNION ALL

		SELECT
			VAC.DATA,
			P.NOME,
			'üíâVacinacao - ' || F.NOME AS DESCRICAO,
			F.VALOR,
			PP.DESCONTO_VACINACAO AS DESCONTO_APLICADO,
			PAG.VALOR_TOTAL
		FROM VACINACAO VAC
			JOIN VINCULO V ON V.COD_VINCULO = VAC.COD_VINCULO
			JOIN PET P ON P.COD_PET = V.COD_PET
			JOIN FARMACO F ON F.COD_FARM = VAC.COD_FARM
			JOIN PLANO_PET PP ON PP.COD_PLANO_PET = V.COD_PLANO_PET
			JOIN PAGAMENTO PAG ON PAG.COD_PAG = VAC.COD_PAG
		WHERE P.COD_TUTOR = VAR_COD_TUTOR AND ((VAR_PERIODO_INICIO IS NULL AND VAR_PERIODO_FINAL IS NULL) OR VAC.DATA BETWEEN VAR_PERIODO_INICIO AND VAR_PERIODO_FINAL)
	)

	SELECT *
	FROM GASTOS_TOTAIS
	ORDER BY DATA;
END;
$$ LANGUAGE PLPGSQL;


--- (3) VISUALIZAR PERFIL DO PET (NOME, ESPECIE, PORTE, NOME DO TUTOR, DATA DE NASCIMENTO, FOTO?(SIMULADO POR UM EMOJIüò∫))

CREATE OR REPLACE FUNCTION RELATORIO_VISUALIZAR_PERFIL_DO_PET(
	P_NOME_PET VARCHAR(50) DEFAULT NULL,
	P_CPF VARCHAR(11) DEFAULT NULL
)RETURNS TABLE (
	FOTO TEXT,
	NOME_PET VARCHAR(50),
	IDADE TEXT,
	DATA_NASCIMENTO DATE,
	ESPECIE VARCHAR(50),
	PORTE VARCHAR(50),
	SEXO TEXT	
) 
SECURITY DEFINER
AS $$
DECLARE
	VAR_COD_PET INT;
BEGIN
	IF P_NOME_PET IS NULL OR P_NOME_PET = '' THEN
		RAISE EXCEPTION '‚ùå Insira o nome do seu PET.';
	END IF;

	IF P_CPF IS NULL OR P_CPF = '' THEN
		RAISE EXCEPTION '‚ùå Insira o seu CPF.';
	END IF;

	IF LENGTH(P_CPF) <> 11 THEN
		RAISE EXCEPTION '‚ùå Formato de CPF invalido. Insira 11 digitos, sem pontos ou tra√ßos.';
	END IF;

	VAR_COD_PET := BUSCAR_COD_PET(P_CPF,P_NOME_PET);

	RETURN QUERY
	SELECT
		CASE
			WHEN P.ESPECIE ILIKE 'Cachorro' THEN 'üê∂'
			WHEN P.ESPECIE ILIKE 'Gato' THEN 'üê±'
			WHEN P.ESPECIE ILIKE 'Papagaio' THEN 'ü¶ú'
			WHEN P.ESPECIE ILIKE 'Hamster' THEN 'üêπ'
			ELSE 'üêæ'
		END AS FOTO,
		P.NOME,
    	TO_CHAR(AGE(CURRENT_DATE, P.DT_NASC), 'FMYYYY "anos, "FMMM "meses e "FMDD "dias"') AS IDADE,
		P.DT_NASC,
		P.ESPECIE,
		P.PORTE,
		CASE
			WHEN P.SEXO ILIKE 'F' THEN 'üö∫ Feminino'
			WHEN P.SEXO ILIKE 'M' THEN 'üöπ Masculino'
		END AS SEXO
	FROM PET P
		JOIN TUTOR T ON T.COD_TUTOR = P.COD_TUTOR
	WHERE P.COD_PET = VAR_COD_PET;
END;
$$ LANGUAGE PLPGSQL;



-- ===========================
-- =  TESTES DOS RELATORIOS =
-- ===========================


-- PARA ATENDENTE -----------------------------------------------------------------------------

SELECT * FROM RELATORIO_ESTOQUE_FARMACOS()

SELECT * FROM RELATORIO_FATURAMENTO_DA_CLINICA('2025-01-01','2025-02-05')
SELECT * FROM RELATORIO_FATURAMENTO_DA_CLINICA()

SELECT * FROM RELATORIO_AGENDA_DO_DIA()
SELECT * FROM RELATORIO_AGENDA_DO_DIA('2025-07-1','2025-07-30')


-- PARA VETERINARIO -----------------------------------------------------------------------------
SELECT * FROM RELATORIO_HISTORICO_PACIENTE('THOR','12345678901')

SELECT * FROM RELATORIO_CONS_VAC_REALIZADAS('CRMV-PI 1234','2025-06-30','2025-08-30')


-- PARA TUTOR -----------------------------------------------------------------------------

	-- INSERTS PARA EXEMPLO
SELECT CADASTRAR_PET('Mimia','2020-10-13','Gato','Pequeno','F','12345678901')
SELECT CADASTRAR_PET('Elizabeth','2018-02-20','Cachorro','Medio','F','12345678901')
SELECT CADASTRAR_PET('Lika','2024-01-24','Gato','Pequeno','F','12345678901')

SELECT FROM REALIZAR_CONSULTA('12345678901', 'Mimia','Bruna Rodrigues','PIX',1, 'CRMV-MA 3456', 'Problema no coracao')
SELECT FROM REALIZAR_VACINACAO('12345678901','Elizabeth','Juliana Castro','Dinheiro',1,'CRMV-PI 1234','Vacina Antirr√°bica')
SELECT FROM REALIZAR_VACINACAO('12345678901','Lika','Juliana Castro','Dinheiro',1,'CRMV-PI 1234','Vacina Antirr√°bica')

	-- TESTE
SELECT * FROM RELATORIO_HISTORICO_DO_SEU_PET('12345678901',null,'consulta')
SELECT * FROM RELATORIO_HISTORICO_DO_SEU_PET('12345678901',null,'vacinacao')
SELECT * FROM RELATORIO_HISTORICO_DO_SEU_PET('12345678901','thor')
SELECT * FROM RELATORIO_HISTORICO_DO_SEU_PET('12345678901')


SELECT * FROM RELATORIO_SEUS_GASTOS('67890123456')
SELECT * FROM RELATORIO_SEUS_GASTOS('12345678901')
SELECT * FROM RELATORIO_SEUS_GASTOS('12345678901','2025-07-01','2025-07-30')

SELECT * FROM RELATORIO_VISUALIZAR_PERFIL_DO_PET('lika','12345678901')