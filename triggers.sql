
----- CRIAÇÃO DAS FUNÇÕES DOS TRIGGERS -----

CREATE OR REPLACE FUNCTION VERIFICAR_TUTOR()
RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
	
		IF NEW.NOME IS NULL OR NEW.NOME = '' THEN
			RAISE EXCEPTION 'O nome do tutor não pode ser vazio.';
		END IF;

		IF NEW.CPF IS NULL OR NEW.CPF = '' THEN
			RAISE EXCEPTION 'O cpf do tutor não pode ser vazio.';
		END IF;

		IF TG_OP = 'INSERT' AND EXISTS (
			SELECT 1 FROM TUTOR WHERE CPF = NEW.CPF
		) THEN
			RAISE EXCEPTION 'O CPF do tutor já existe.';
		END IF;

		IF TG_OP = 'UPDATE' AND EXISTS (
			SELECT 1 FROM TUTOR WHERE CPF = NEW.CPF AND COD_TUTOR <> OLD.COD_TUTOR
		) THEN
			RAISE EXCEPTION 'O CPF do tutor já existe.';
		END IF;

		IF NEW.DT_NASC IS NULL THEN
			RAISE EXCEPTION 'A data de nascimento do tutor não pode ser vazio.';
		END IF;

		IF NEW.FONE IS NULL OR NEW.FONE = '' THEN
			RAISE EXCEPTION 'O telefone do tutor não pode ser vazio.';
		END IF;


		IF LENGTH(NEW.NOME) > 50 THEN
			RAISE EXCEPTION 'O nome do tutor ultrapassa o limite de 50 caracteres.';
		END IF;

		IF LENGTH(NEW.CPF) > 11 THEN
			RAISE EXCEPTION 'O cpf do tutor ultrapassa o limite de 11 caracteres.';
		END IF;

		IF LENGTH(NEW.FONE) > 15 THEN
			RAISE EXCEPTION 'O telefone do tutor ultrapassa o limite de 15 caracteres.';
		END IF;
		
	END IF;

	IF TG_OP = 'DELETE' THEN
		IF EXISTS (SELECT 1 FROM PET WHERE OLD.COD_TUTOR = COD_TUTOR) THEN
			DELETE FROM PET WHERE COD_TUTOR = OLD.COD_TUTOR;
		END IF;

		RETURN OLD;
	END IF;

	RETURN NEW;
	
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION VERIFICAR_PLANO_PET()
RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
	
		IF NEW.NOME IS NULL OR NEW.NOME = '' THEN
			RAISE EXCEPTION 'O nome do plano pet não pode ser vazio.';
		END IF;

		IF NEW.VALOR IS NULL OR NEW.VALOR < 0 THEN
			RAISE EXCEPTION 'O valor do plano pet não pode ser vazio ou menor que 0.';
		END IF;

		IF NEW.DESCONTO_CONSULTA IS NULL OR NEW.DESCONTO_CONSULTA < 0 THEN
			RAISE EXCEPTION 'O desconto da consulta do plano pet não pode ser vazio ou menor que 0.';
		END IF;

		IF NEW.DESCONTO_CONSULTA > 100 THEN
			RAISE EXCEPTION 'O desconto da consulta do plano pet não pode ser maior que 100.';
		END IF;

		IF NEW.DESCONTO_VACINACAO IS NULL OR NEW.DESCONTO_VACINACAO < 0 THEN
			RAISE EXCEPTION 'O desconto da vacinacao do plano pet não pode ser vazio ou menor que 0.';
		END IF;

		IF NEW.DESCONTO_VACINACAO > 100 THEN
			RAISE EXCEPTION 'O desconto da vacinacao do plano pet não pode ser maior que 100.';
		END IF;

		IF LENGTH(NEW.NOME) > 50 THEN
			RAISE EXCEPTION 'O nome do plano pet ultrapassa o limite de 50 caracteres.';
		END IF;
		
	END IF;

	IF TG_OP = 'DELETE' THEN
		IF EXISTS (SELECT 1 FROM VINCULO WHERE COD_PLANO_PET = OLD.COD_PLANO_PET) THEN
			DELETE FROM VINCULO WHERE COD_PLANO_PET = OLD.COD_PLANO_PET;
		END IF;

		RETURN OLD;
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION VERIFICAR_PET()
RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
	
		IF NEW.NOME IS NULL OR NEW.NOME = '' THEN
			RAISE EXCEPTION 'O nome do pet não pode ser vazio.';
		END IF;

		IF NEW.DT_NASC IS NULL THEN
			RAISE EXCEPTION 'A data de nascimento do pet não pode ser vazio.';
		END IF;

		IF NEW.ESPECIE IS NULL OR NEW.ESPECIE = '' THEN
			RAISE EXCEPTION 'O nome da especie do pet não pode ser vazio.';
		END IF;

		IF NEW.PORTE IS NULL OR NEW.PORTE = '' THEN
			RAISE EXCEPTION 'O nome do porte do pet não pode ser vazio.';
		END IF;

		IF NEW.COD_TUTOR IS NULL THEN
			RAISE EXCEPTION 'O código do tutor do pet não pode ser vazio.';
		END IF;

		IF NOT EXISTS (SELECT 1 FROM TUTOR WHERE NEW.COD_TUTOR = COD_TUTOR) THEN
			RAISE EXCEPTION 'O código do tutor informado não existe.';
		END IF;


		IF LENGTH(NEW.NOME) > 50 THEN
			RAISE EXCEPTION 'O nome do pet ultrapassa o limite de 50 caracteres.';
		END IF;

		IF LENGTH(NEW.ESPECIE) > 50 THEN
			RAISE EXCEPTION 'O nome da especie do pet ultrapassa o limite de 50 caracteres.';
		END IF;

		IF LENGTH(NEW.PORTE) > 50 THEN
			RAISE EXCEPTION 'O nome do porte do pet ultrapassa o limite de 50 caracteres.';
		END IF;
	END IF;

	IF TG_OP = 'DELETE' THEN
		IF EXISTS (SELECT 1 FROM VINCULO WHERE OLD.COD_PET = COD_PET) THEN
			DELETE FROM VINCULO WHERE COD_PET = OLD.COD_PET;
		END IF;
		
		RETURN OLD;
		
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION VERIFICAR_VINCULO()
RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
	
		IF NEW.DT_CONTRATACAO IS NULL THEN
			RAISE EXCEPTION 'A data de contratação não pode ser vazia.';
		END IF;

		IF NEW.STATUS IS NULL THEN
			RAISE EXCEPTION 'O status do vínculo não pode ser vazio.';
		END IF;

		IF NEW.COD_PET IS NULL THEN
			RAISE EXCEPTION 'O código do pet não pode ser vazio.';
		END IF;

		IF NOT EXISTS (
			SELECT 1 FROM PET WHERE COD_PET = NEW.COD_PET
		) THEN
			RAISE EXCEPTION 'O código do pet informado não existe.';
		END IF;

		IF NEW.COD_PLANO_PET IS NULL THEN
			RAISE EXCEPTION 'O código do plano pet não pode ser vazio.';
		END IF;

		IF NOT EXISTS (
			SELECT 1 FROM PLANO_PET WHERE COD_PLANO_PET = NEW.COD_PLANO_PET
		) THEN
			RAISE EXCEPTION 'O código do plano pet informado não existe.';
		END IF;
	END IF;

	IF TG_OP = 'DELETE' THEN

		IF EXISTS (SELECT 1 FROM CONSULTA WHERE COD_VINCULO = OLD.COD_VINCULO) THEN
			DELETE FROM CONSULTA WHERE COD_VINCULO = OLD.COD_VINCULO;
		END IF;

		IF EXISTS (SELECT 1 FROM VACINACAO WHERE COD_VINCULO = OLD.COD_VINCULO) THEN
			DELETE FROM VACINACAO WHERE COD_VINCULO = OLD.COD_VINCULO;
		END IF;
		
		RETURN OLD;
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION VERIFICAR_ESPECIALIDADE()
RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN

		IF NEW.NOME IS NULL OR NEW.NOME = '' THEN
			RAISE EXCEPTION 'O nome da especialidade não pode ser vazio.';
		END IF;

		IF NEW.DESCR IS NULL OR NEW.DESCR = '' THEN
			RAISE EXCEPTION 'A descrição da especialidade não pode ser vazia.';
		END IF;

		IF NEW.VALOR IS NULL OR NEW.VALOR < 0 THEN
			RAISE EXCEPTION 'O valor da especialidade não pode ser vazio ou menor que 0.';
		END IF;

		IF LENGTH(NEW.NOME) > 50 THEN
			RAISE EXCEPTION 'O nome da especialidade ultrapassa o limite de 50 caracteres.';
		END IF;
	END IF;

	IF TG_OP = 'DELETE' THEN
		IF EXISTS (SELECT 1 FROM VETERINARIO WHERE COD_ESP = OLD.COD_ESP) THEN
			DELETE FROM VETERINARIO WHERE COD_ESP = OLD.COD_ESP;
		END IF;
		
		RETURN OLD;
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION VERIFICAR_VETERINARIO()
RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN

		IF NEW.NOME IS NULL OR NEW.NOME = '' THEN
			RAISE EXCEPTION 'O nome do veterinário não pode ser vazio.';
		END IF;

		IF NEW.CRMV IS NULL OR NEW.CRMV = '' THEN
			RAISE EXCEPTION 'O CRMV do veterinário não pode ser vazio.';
		END IF;

		IF TG_OP = 'INSERT' AND EXISTS (
			SELECT 1 FROM VETERINARIO WHERE CRMV = NEW.CRMV
		) THEN
			RAISE EXCEPTION 'O CRMV do veterinário já existe.';
		END IF;

		IF TG_OP = 'UPDATE' AND EXISTS (
			SELECT 1 FROM VETERINARIO WHERE CRMV = NEW.CRMV AND COD_VET <> OLD.COD_VET
		) THEN
			RAISE EXCEPTION 'O CRMV do veterinário já existe.';
		END IF;

		IF NEW.COD_ESP IS NULL THEN
			RAISE EXCEPTION 'A especialidade do veterinário não pode ser vazia.';
		END IF;

		IF NOT EXISTS (SELECT 1 FROM ESPECIALIDADE WHERE COD_ESP = NEW.COD_ESP) THEN
			RAISE EXCEPTION 'O código da especialidade informada não existe.';
		END IF;

		IF LENGTH(NEW.NOME) > 50 THEN
			RAISE EXCEPTION 'O nome do veterinário ultrapassa o limite de 50 caracteres.';
		END IF;

		IF LENGTH(NEW.CRMV) > 15 THEN
			RAISE EXCEPTION 'O CRMV do veterinário ultrapassa o limite de 15 caracteres.';
		END IF;
	END IF;

	IF TG_OP = 'DELETE' THEN
		IF EXISTS (SELECT 1 FROM CONSULTA WHERE COD_VET = OLD.COD_VET) THEN
			DELETE FROM CONSULTA WHERE COD_VET = OLD.COD_VET;
		END IF;

		IF EXISTS (SELECT 1 FROM VACINACAO WHERE COD_VET = OLD.COD_VET) THEN
			DELETE FROM VACINACAO WHERE COD_VET = OLD.COD_VET;
		END IF;
		
		RETURN OLD;
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION VERIFICAR_ATENDENTE()
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN

        IF NEW.NOME IS NULL OR NEW.NOME = '' THEN
            RAISE EXCEPTION 'O nome do atendente não pode ser vazio.';
        END IF;

        IF NEW.DT_NASC IS NULL THEN
            RAISE EXCEPTION 'A data de nascimento do atendente não pode ser vazia.';
        END IF;

        IF NEW.SALARIO IS NULL OR NEW.SALARIO < 0 THEN
            RAISE EXCEPTION 'O salário do atendente não pode ser vazio ou menor que zero.';
        END IF;

        IF LENGTH(NEW.NOME) > 50 THEN
            RAISE EXCEPTION 'O nome do atendente ultrapassa o limite de 50 caracteres.';
        END IF;
    END IF;
	
    IF TG_OP = 'DELETE' THEN
	
		IF EXISTS (SELECT 1 FROM CONSULTA WHERE COD_ATEND = OLD.COD_ATEND) THEN
			DELETE FROM CONSULTA WHERE COD_ATEND = OLD.COD_ATEND;
		END IF;

		IF EXISTS (SELECT 1 FROM VACINACAO WHERE COD_ATEND = OLD.COD_ATEND) THEN
			DELETE FROM VACINACAO WHERE COD_ATEND = OLD.COD_ATEND;
		END IF;
		
        RETURN OLD;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION VERIFICAR_PAGAMENTO()
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
	
        IF NEW.FORMA_PAG IS NULL OR NEW.FORMA_PAG = '' THEN
            RAISE EXCEPTION 'A forma de pagamento não pode ser vazia.';
        END IF;

		IF NEW.VALOR_TOTAL IS NULL OR NEW.VALOR_TOTAL < 0 THEN
            RAISE EXCEPTION 'O valor total não pode ser vazio ou menor que zero.';
        END IF;

		IF NEW.QUANT_PARCELAS IS NULL OR NEW.QUANT_PARCELAS < 1 THEN
            RAISE EXCEPTION 'A quantidade de parcelas não pode ser vazia ou menor que 1.';
        END IF;

		IF NEW.DATA IS NULL THEN
            RAISE EXCEPTION 'A data do pagamento não pode ser vazio.';
        END IF;

        IF LENGTH(NEW.FORMA_PAG) > 20 THEN
            RAISE EXCEPTION 'A forma de pagamento ultrapassa o limite de 20 caracteres.';
        END IF;
    END IF;

    IF TG_OP = 'DELETE' THEN
		IF EXISTS (SELECT 1 FROM CONSULTA WHERE COD_PAG = OLD.COD_PAG) THEN
			DELETE FROM CONSULTA WHERE COD_PAG = OLD.COD_PAG;
		END IF;

		IF EXISTS (SELECT 1 FROM VACINACAO WHERE COD_PAG = OLD.COD_PAG) THEN
			DELETE FROM VACINACAO WHERE COD_PAG = OLD.COD_PAG;
		END IF;

		IF EXISTS (SELECT 1 FROM PARCELA WHERE COD_PAG = OLD.COD_PAG) THEN
			DELETE FROM PARCELA WHERE COD_PAG = OLD.COD_PAG;
		END IF;
		
        RETURN OLD;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION VERIFICAR_PARCELA()
RETURNS TRIGGER AS $$
BEGIN

    IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN

        IF NEW.VENC IS NULL THEN
            RAISE EXCEPTION 'A data de vencimento da parcela não pode ser vazio.';
        END IF;

        IF NEW.VALOR IS NULL OR NEW.VALOR < 0 THEN
            RAISE EXCEPTION 'O valor da parcela não pode ser vazio ou menor que zero.';
        END IF;

        IF NEW.STATUS IS NULL THEN
            RAISE EXCEPTION 'O status da parcela não pode ser vazio.';
        END IF;

        IF NEW.COD_PAG IS NULL THEN
            RAISE EXCEPTION 'O código do pagamento não pode ser vazio.';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM PAGAMENTO WHERE COD_PAG = NEW.COD_PAG) THEN
            RAISE EXCEPTION 'O código do pagamento informado não existe.';
        END IF;
    END IF;

    IF TG_OP = 'DELETE' THEN
        RETURN OLD;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION VERIFICAR_CONSULTA()
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN

        IF NEW.DATA IS NULL THEN
            RAISE EXCEPTION 'A data da consulta não pode ser vazio.';
        END IF;

        IF NEW.HORA IS NULL THEN
            RAISE EXCEPTION 'O horário da consulta não pode ser vazio.';
        END IF;

        IF NEW.DIAGNOSTICO IS NULL OR NEW.DIAGNOSTICO = '' THEN
            RAISE EXCEPTION 'O diagnóstico da consulta não pode ser vazio.';
        END IF;

        IF NEW.COD_VET IS NULL THEN
            RAISE EXCEPTION 'O código do veterinário não pode ser vazio.';
        END IF;

        IF NEW.COD_VINCULO IS NULL THEN
            RAISE EXCEPTION 'O código do vínculo não pode ser vazio.';
        END IF;

        IF NEW.COD_ATEND IS NULL THEN
            RAISE EXCEPTION 'O código do atendente não pode ser vazio.';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM VETERINARIO WHERE COD_VET = NEW.COD_VET) THEN
            RAISE EXCEPTION 'O código do veterinário informado não existe.';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM VINCULO WHERE COD_VINCULO = NEW.COD_VINCULO) THEN
            RAISE EXCEPTION 'O código do vínculo informado não existe.';
        END IF;

        IF NOT EXISTS (SELECT 1 FROM ATENDENTE WHERE COD_ATEND = NEW.COD_ATEND) THEN
            RAISE EXCEPTION 'O código do atendente informado não existe.';
        END IF;
    
	END IF;

    IF TG_OP = 'DELETE' THEN
        RETURN OLD;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION VERIFICAR_VACINACAO()
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN

        IF NEW.DATA IS NULL THEN
            RAISE EXCEPTION 'A data da vacinação não pode ser vazio.';
        END IF;

        IF NEW.HORA IS NULL THEN
            RAISE EXCEPTION 'A hora da vacinação não pode ser vazio.';
        END IF;

        IF NEW.COD_VET IS NULL THEN
            RAISE EXCEPTION 'O código do veterinário não pode ser vazio.';
		END IF;

        IF NEW.COD_VINCULO IS NULL THEN
            RAISE EXCEPTION 'O código do vínculo não pode ser vazio.';
        END IF;

        IF NEW.COD_ATEND IS NULL THEN
            RAISE EXCEPTION 'O código do atendente não pode ser vazio.';
		END IF;

		IF NEW.COD_FARM IS NULL THEN
			RAISE EXCEPTION 'O código do fármaco não pode ser vazio.';
		END IF;

		IF NOT EXISTS (SELECT 1 FROM VETERINARIO WHERE COD_VET = NEW.COD_VET) THEN
            RAISE EXCEPTION 'O código do veterinário informado não existe.';
        END IF;

		IF NOT EXISTS (SELECT 1 FROM VINCULO WHERE COD_VINCULO = NEW.COD_VINCULO) THEN
            RAISE EXCEPTION 'O código do vínculo informado não existe.';
        END IF;

		IF NOT EXISTS (SELECT 1 FROM ATENDENTE WHERE COD_ATEND = NEW.COD_ATEND) THEN
            RAISE EXCEPTION 'O código do atendente informado não existe.';
        END IF;
		
        IF NOT EXISTS (SELECT 1 FROM FARMACO WHERE COD_FARM = NEW.COD_FARM) THEN
            RAISE EXCEPTION 'O código do fármaco informado não existe.';
        END IF;

		UPDATE FARMACO 
		SET QUANT = QUANT - 1
		WHERE COD_FARM = NEW.COD_FARM;

    END IF;

    IF TG_OP = 'DELETE' THEN
		RETURN OLD;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION VERIFICAR_MEDICACAO()
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN

        IF NEW.DATA IS NULL THEN
            RAISE EXCEPTION 'A data da medicação não pode ser vazio.';
        END IF;

        IF NEW.HORA IS NULL THEN
            RAISE EXCEPTION 'A hora da medicação não pode ser vazio.';
        END IF;

		IF NEW.COD_FARM IS NULL THEN
			RAISE EXCEPTION 'O código do fármaco não pode ser vazio.';
        END IF;

		IF NOT EXISTS (SELECT 1 FROM FARMACO WHERE COD_FARM = NEW.COD_FARM) THEN
            RAISE EXCEPTION 'O código do fármaco informado não existe.';
        END IF;
		
		IF EXISTS (
			SELECT 1
			FROM FARMACO
			WHERE COD_FARM = NEW.COD_FARM 
			AND VALIDADE < CURRENT_DATE
		) THEN
			RAISE EXCEPTION 'A validade do fármaco está vencida.';
		ELSE
			UPDATE FARMACO
			SET QUANT = QUANT - 1
			WHERE COD_FARM = NEW.COD_FARM;
		END IF;
		
    END IF;

    IF TG_OP = 'DELETE' THEN
		IF EXISTS (SELECT 1 FROM CONSULTA WHERE COD_MEDICACAO = OLD.COD_MEDICACAO) THEN
			DELETE FROM CONSULTA WHERE COD_MEDICACAO = OLD.COD_MEDICACAO;
		END IF;
        RETURN OLD;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION VERIFICAR_TIPO()
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
        IF NEW.NOME IS NULL OR NEW.NOME = '' THEN
            RAISE EXCEPTION 'O nome do tipo não pode ser vazio.';
        END IF;

        IF LENGTH(NEW.NOME) > 30 THEN
            RAISE EXCEPTION 'O nome do tipo ultrapassa o limite de 30 caracteres.';
        END IF;

    END IF;

    IF TG_OP = 'DELETE' THEN
		IF EXISTS (SELECT 1 FROM FARMACO WHERE COD_TIPO = OLD.COD_TIPO) THEN
			DELETE FROM FARMACO WHERE COD_TIPO = OLD.COD_TIPO;
		END IF;
		
        RETURN OLD;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION VERIFICAR_FARMACO()
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN

        IF NEW.NOME IS NULL OR NEW.NOME = '' THEN
            RAISE EXCEPTION 'O nome do fármaco não pode ser vazio.';
        END IF;

		IF NEW.DOSE IS NULL OR NEW.DOSE = '' THEN
			RAISE EXCEPTION 'A dose do fármaco não pode ser nula.';
		END IF;

        IF NEW.VALIDADE IS NULL THEN
            RAISE EXCEPTION 'A data de validade do fármaco não pode ser nula.';
        END IF;

        IF NEW.LOTE IS NULL OR NEW.LOTE = '' THEN
            RAISE EXCEPTION 'O lote do fármaco não pode ser vazio.';
		END IF;

        IF NEW.DT_ENTRADA IS NULL THEN
            RAISE EXCEPTION 'A data de entrada do fármaco não pode ser nula.';
        END IF;

        IF NEW.VALOR IS NULL OR NEW.VALOR < 0 THEN
            RAISE EXCEPTION 'O valor do fármaco não pode ser nulo ou negativo.';
        END IF;

        IF NEW.QUANT IS NULL OR NEW.QUANT < 0 THEN
            RAISE EXCEPTION 'A quantidade do fármaco não pode ser nula ou negativa.';
        END IF;

        IF NEW.COD_TIPO IS NULL THEN
            RAISE EXCEPTION 'O código do tipo do fármaco não pode ser nulo.';
		END IF;

		IF LENGTH(NEW.NOME) > 50 THEN
            RAISE EXCEPTION 'O nome do fármaco ultrapassa o limite de 50 caracteres.';
        END IF;

		IF LENGTH(NEW.DOSE) > 10 THEN
            RAISE EXCEPTION 'A dose do fármaco ultrapassa o limite de 10 caracteres.';
        END IF;

		IF LENGTH(NEW.LOTE) > 30 THEN
            RAISE EXCEPTION 'O lote do fármaco ultrapassa o limite de 30 caracteres.';
        END IF;

		IF NOT EXISTS (SELECT 1 FROM TIPO WHERE COD_TIPO = NEW.COD_TIPO) THEN
            RAISE EXCEPTION 'O código do tipo informado não existe.';
        END IF;

    END IF;

    IF TG_OP = 'DELETE' THEN
		IF EXISTS (SELECT 1 FROM VACINACAO WHERE COD_FARM = OLD.COD_FARM) THEN
			DELETE FROM VACINACAO WHERE COD_FARM = OLD.COD_FARM;
		END IF;

		IF EXISTS (SELECT 1 FROM MEDICACAO WHERE COD_FARM = OLD.COD_FARM) THEN
			DELETE FROM MEDICACAO WHERE COD_FARM = OLD.COD_FARM;
		END IF;
		
        RETURN OLD;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;



----- CRIAÇÃO DOS TRIGGERS -----

CREATE OR REPLACE TRIGGER TRIGGER_VERIFICAR_TUTOR
BEFORE INSERT OR UPDATE OR DELETE ON TUTOR
FOR EACH ROW EXECUTE FUNCTION VERIFICAR_TUTOR();



CREATE OR REPLACE TRIGGER TRIGGER_VERIFICAR_PLANO_PET
BEFORE INSERT OR UPDATE OR DELETE ON PLANO_PET
FOR EACH ROW EXECUTE FUNCTION VERIFICAR_PLANO_PET();



CREATE OR REPLACE TRIGGER TRIGGER_VERIFICAR_PET
BEFORE INSERT OR UPDATE OR DELETE ON PET
FOR EACH ROW EXECUTE FUNCTION VERIFICAR_PET();



CREATE OR REPLACE TRIGGER TRIGGER_VERIFICAR_VINCULO
BEFORE INSERT OR UPDATE OR DELETE ON VINCULO
FOR EACH ROW EXECUTE FUNCTION VERIFICAR_VINCULO();



CREATE OR REPLACE TRIGGER TRIGGER_VERIFICAR_ESPECIALIDADE
BEFORE INSERT OR UPDATE OR DELETE ON ESPECIALIDADE
FOR EACH ROW EXECUTE FUNCTION VERIFICAR_ESPECIALIDADE();



CREATE OR REPLACE TRIGGER TRIGGER_VERIFICAR_VETERINARIO
BEFORE INSERT OR UPDATE OR DELETE ON VETERINARIO
FOR EACH ROW EXECUTE FUNCTION VERIFICAR_VETERINARIO();



CREATE OR REPLACE TRIGGER TRIGGER_VERIFICAR_ATENDENTE
BEFORE INSERT OR UPDATE OR DELETE ON ATENDENTE
FOR EACH ROW EXECUTE FUNCTION VERIFICAR_ATENDENTE();



CREATE OR REPLACE TRIGGER TRIGGER_VERIFICAR_PAGAMENTO
BEFORE INSERT OR UPDATE OR DELETE ON PAGAMENTO
FOR EACH ROW EXECUTE FUNCTION VERIFICAR_PAGAMENTO();



CREATE OR REPLACE TRIGGER TRIGGER_VERIFICAR_PARCELA
BEFORE INSERT OR UPDATE OR DELETE ON PARCELA
FOR EACH ROW EXECUTE FUNCTION VERIFICAR_PARCELA();



CREATE OR REPLACE TRIGGER TRIGGER_VERIFICAR_CONSULTA
BEFORE INSERT OR UPDATE OR DELETE ON CONSULTA
FOR EACH ROW EXECUTE FUNCTION VERIFICAR_CONSULTA();



CREATE OR REPLACE TRIGGER TRIGGER_VERIFICAR_VACINACAO
BEFORE INSERT OR UPDATE OR DELETE ON VACINACAO
FOR EACH ROW EXECUTE FUNCTION VERIFICAR_VACINACAO();



CREATE OR REPLACE TRIGGER TRIGGER_VERIFICAR_MEDICACAO
BEFORE INSERT OR UPDATE OR DELETE ON MEDICACAO
FOR EACH ROW EXECUTE FUNCTION VERIFICAR_MEDICACAO();



CREATE OR REPLACE TRIGGER TRIGGER_VERIFICAR_TIPO
BEFORE INSERT OR UPDATE OR DELETE ON TIPO
FOR EACH ROW EXECUTE FUNCTION VERIFICAR_TIPO();



CREATE OR REPLACE TRIGGER TRIGGER_VERIFICAR_FARMACO
BEFORE INSERT OR UPDATE OR DELETE ON FARMACO
FOR EACH ROW EXECUTE FUNCTION VERIFICAR_FARMACO();


