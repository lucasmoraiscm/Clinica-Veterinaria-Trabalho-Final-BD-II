CREATE OR REPLACE FUNCTION CONTRATAR_PLANO_PET(CPF_TUTOR VARCHAR, NOME_PET VARCHAR, NOME_PLANO_PET VARCHAR)
RETURNS VOID
AS $$
DECLARE
	COD_PET_BUSCADO INT;
	COD_PLANO_PET_BUSCADO INT;
BEGIN
	-- BUSCA O COD_PET
	IF EXISTS (
		SELECT 1
		FROM PET P JOIN TUTOR T
		ON P.COD_TUTOR = T.COD_TUTOR
		WHERE P.NOME ILIKE NOME_PET AND T.CPF = CPF_TUTOR
	) THEN
		COD_PET_BUSCADO := (
			SELECT P.COD_PET
			FROM PET P JOIN TUTOR T
			ON P.COD_TUTOR = T.COD_TUTOR
			WHERE P.NOME ILIKE NOME_PET AND T.CPF = CPF_TUTOR
		);
	ELSE
		RAISE EXCEPTION 'O pet não foi encontrado';
	END IF;

	-- BUSCA O COD_PLANO_PET
	IF EXISTS (SELECT 1 FROM PLANO_PET WHERE NOME ILIKE NOME_PLANO_PET) THEN
		COD_PLANO_PET_BUSCADO := (SELECT COD_PLANO_PET FROM PLANO_PET WHERE NOME ILIKE NOME_PLANO_PET LIMIT 1);
	ELSE
		RAISE EXCEPTION 'O plano pet não foi encontrado';
	END IF;

	-- VERIFICA SE O PLANO SOLICITADO JÁ FOI CONTRATADO, SENÃO, CASO JÁ EXISTA ALGUM PLANO CONTRATADO, DESATIVA OS PLANO ANTERIORES
	IF EXISTS (
		SELECT 1
		FROM VINCULO V JOIN PLANO_PET P
		ON V.COD_PLANO_PET = P.COD_PLANO_PET
		WHERE V.COD_PET = COD_PET_BUSCADO AND V.STATUS = TRUE AND P.NOME ILIKE NOME_PLANO_PET
	) THEN
		RAISE EXCEPTION 'O plano já foi contratado';
	ELSIF EXISTS (SELECT 1 FROM VINCULO WHERE COD_PET = COD_PET_BUSCADO) THEN
		UPDATE VINCULO
		SET STATUS = FALSE
		WHERE COD_PET = COD_PET_BUSCADO;
	END IF;

	-- CADASTRA O PLANO PET SOLICITADO
	INSERT INTO VINCULO (DT_CONTRATACAO, STATUS, COD_PET, COD_PLANO_PET) 
	VALUES (NOW(), TRUE, COD_PET_BUSCADO, COD_PLANO_PET_BUSCADO);
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION REALIZAR_CONSULTA(CPF_TUTOR VARCHAR, NOME_PET VARCHAR, 
NOME_ATEND VARCHAR, FORMA_PAG_CONS VARCHAR, QUANT_PARC_CONS INT, 
CRMV_VET VARCHAR, DIAGNOSTICO_CONS TEXT, NOME_FARMACO VARCHAR)
RETURNS VOID
AS $$
DECLARE
	COD_VINCULO_BUSCADO INT;
	DESCONTO_BUSCADO FLOAT;
	COD_ATEND_BUSCADO INT;
	COD_VET_BUSCADO INT;
	VALOR_CONS_BUSCADO FLOAT;
	COD_FARM_BUSCADO INT;
	VALOR_FARM_BUSCADO FLOAT;
	COD_MEDICACAO_BUSCADO INT;
	VALOR_CONS_DESCONTADO FLOAT;
	VALOR_TOTAL_CONS FLOAT;
	VALOR_PARCELA FLOAT;
	VENC_PARCELA DATE;
	COD_PAG_BUSCADO INT;
	CONTADOR INT;
BEGIN
	-- BUSCA O COD_VINCULO
	IF EXISTS (
		SELECT 1
		FROM VINCULO V JOIN PET P
		ON V.COD_PET = P.COD_PET JOIN TUTOR T
		ON P.COD_TUTOR = T.COD_TUTOR
		WHERE P.NOME ILIKE NOME_PET AND T.CPF = CPF_TUTOR AND STATUS = TRUE
	) THEN
		COD_VINCULO_BUSCADO := (
			SELECT V.COD_VINCULO
			FROM VINCULO V JOIN PET P
			ON V.COD_PET = P.COD_PET JOIN TUTOR T
			ON P.COD_TUTOR = T.COD_TUTOR
			WHERE P.NOME ILIKE NOME_PET 
			AND T.CPF = CPF_TUTOR 
			AND STATUS = TRUE
		);
		DESCONTO_BUSCADO := (
			SELECT P.DESCONTO_CONSULTA
			FROM VINCULO V JOIN PLANO_PET P
			ON V.COD_PLANO_PET = P.COD_PLANO_PET
			WHERE V.COD_VINCULO = COD_VINCULO_BUSCADO
		);
	ELSE
		RAISE EXCEPTION 'O vínculo não foi encontrado';
	END IF;

	-- BUSCA O COD_ATEND
	IF EXISTS (
		SELECT 1
		FROM ATENDENTE
		WHERE NOME = NOME_ATEND
	) THEN
		COD_ATEND_BUSCADO := (
			SELECT COD_ATEND
			FROM ATENDENTE
			WHERE NOME = NOME_ATEND
		);
	ELSE
		RAISE EXCEPTION 'O atendente não foi encontrado';
	END IF;

	-- BUSCA O COD_VET E O VALOR DA ESPECIALIDADE
	IF EXISTS (
		SELECT 1
		FROM VETERINARIO
		WHERE CRMV ILIKE CRMV_VET
	) THEN
		COD_VET_BUSCADO := (
			SELECT COD_VET
			FROM VETERINARIO
			WHERE CRMV ILIKE CRMV_VET
		);
		VALOR_CONS_BUSCADO := (
			SELECT VALOR
			FROM ESPECIALIDADE E JOIN VETERINARIO V
			ON E.COD_ESP = V.COD_ESP
			WHERE V.COD_VET = COD_VET_BUSCADO
		);
	ELSE
		RAISE EXCEPTION 'O veterinário não foi encontrado';
	END IF;

	COD_FARM_BUSCADO := NULL;
	VALOR_FARM_BUSCADO = 0;

	-- SE FOR INFORMADO UM NOME DE FARMACO, BUSCA O COD_FARM E O VALOR
	IF NOME_FARMACO IS NOT NULL THEN
		IF (
			SELECT 1
			FROM FARMACO 
			WHERE NOME ILIKE NOME_FARMACO
		) THEN
			COD_FARM_BUSCADO := (
				SELECT COD_FARM
				FROM FARMACO
				WHERE NOME ILIKE NOME_FARMACO
			);
			VALOR_FARM_BUSCADO := (
				SELECT VALOR
				FROM FARMACO
				WHERE COD_FARM = COD_FARM_BUSCADO
			);
		ELSE
			RAISE EXCEPTION 'O fármaco não foi encontrado';
		END IF;
	END IF;

	COD_MEDICACAO_BUSCADO := NULL;

	-- SE O COD_FARM FOR ENCOTRADO, CADASTRA A MEDICAÇÃO E BUSCA O COD_MEDICACAO
	IF COD_FARM_BUSCADO IS NOT NULL THEN 
		INSERT INTO MEDICACAO (DATA, HORA, COD_FARM)
		VALUES (NOW(), NOW(), COD_FARM_BUSCADO)
		RETURNING COD_MEDICACAO INTO COD_MEDICACAO_BUSCADO;
	END IF;

	VALOR_CONS_DESCONTADO := VALOR_CONS_BUSCADO - ((VALOR_CONS_BUSCADO * DESCONTO_BUSCADO) / 100); -- VALOR TOTAL DA CONSULTA COM DESCONTO
	VALOR_TOTAL_CONS := VALOR_CONS_DESCONTADO + VALOR_FARM_BUSCADO; -- VALOR TOTAL DA CONSULTA + MEDICACAO
	VALOR_PARCELA := ROUND((VALOR_TOTAL_CONS / QUANT_PARC_CONS)::NUMERIC , 2); -- VALOR DA PARCELA

	-- CADASTRA O PAGAMENTO E BUSCA O COD_PAG
	INSERT INTO PAGAMENTO (FORMA_PAG, VALOR_TOTAL, QUANT_PARCELAS, DATA)
	VALUES (FORMA_PAG_CONS, VALOR_TOTAL_CONS, QUANT_PARC_CONS, NOW())
	RETURNING COD_PAG INTO COD_PAG_BUSCADO;

	-- CADASTRA AS PARCELAS
	FOR CONTADOR IN 1 .. QUANT_PARC_CONS LOOP
		VENC_PARCELA := NOW() + (CONTADOR - 1) * INTERVAL '1 month';
	
		IF CONTADOR = 1 THEN
			INSERT INTO PARCELA (VENC, VALOR, STATUS, COD_PAG)
			VALUES (VENC_PARCELA, VALOR_PARCELA, TRUE, COD_PAG_BUSCADO);
		ELSE
			INSERT INTO PARCELA (VENC, VALOR, STATUS, COD_PAG)
			VALUES (VENC_PARCELA, VALOR_PARCELA, FALSE, COD_PAG_BUSCADO);
		END IF;
	END LOOP;

	-- CADASTRA A CONSULTA
	INSERT INTO CONSULTA (DATA, HORA, DIAGNOSTICO, COD_VET, COD_VINCULO, COD_ATEND, COD_PAG, COD_MEDICACAO)
	VALUES (NOW(), NOW(), DIAGNOSTICO_CONS, COD_VET_BUSCADO, COD_VINCULO_BUSCADO, COD_ATEND_BUSCADO, COD_PAG_BUSCADO, COD_MEDICACAO_BUSCADO);
END;
$$ LANGUAGE PLPGSQL;

