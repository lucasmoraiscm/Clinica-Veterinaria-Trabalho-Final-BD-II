CREATE OR REPLACE FUNCTION BUSCAR_COD_TUTOR(CPF_TUTOR VARCHAR)
RETURNS INT
AS $$
BEGIN
	IF EXISTS (
		SELECT 1
		FROM TUTOR
		WHERE CPF = CPF_TUTOR
	) THEN
		RETURN (
			SELECT COD_TUTOR
			FROM TUTOR
			WHERE CPF = CPF_TUTOR
		);
	ELSE
		RAISE EXCEPTION 'O tutor não foi encontrado';
	END IF;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION BUSCAR_COD_PET(CPF_TUTOR VARCHAR, NOME_PET VARCHAR)
RETURNS INT
AS $$
BEGIN
	IF EXISTS (
		SELECT 1
		FROM PET P JOIN TUTOR T
		ON P.COD_TUTOR = T.COD_TUTOR
		WHERE P.NOME ILIKE NOME_PET AND T.CPF = CPF_TUTOR
	) THEN
		RETURN (
			SELECT P.COD_PET
			FROM PET P JOIN TUTOR T
			ON P.COD_TUTOR = T.COD_TUTOR
			WHERE P.NOME ILIKE NOME_PET AND T.CPF = CPF_TUTOR
		);
	ELSE
		RAISE EXCEPTION 'O pet não foi encontrado';
	END IF;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION BUSCAR_COD_PLANO_PET(NOME_PLANO_PET VARCHAR)
RETURNS INT
AS $$
BEGIN
	IF EXISTS (
		SELECT 1 
		FROM PLANO_PET 
		WHERE NOME ILIKE NOME_PLANO_PET
	) THEN
		RETURN (
			SELECT COD_PLANO_PET 
			FROM PLANO_PET 
			WHERE NOME ILIKE NOME_PLANO_PET LIMIT 1
		);
	ELSE
		RAISE EXCEPTION 'O plano pet não foi encontrado';
	END IF;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION BUSCAR_COD_VINCULO(CPF_TUTOR VARCHAR, NOME_PET VARCHAR)
RETURNS INT
AS $$
BEGIN
	IF EXISTS (
		SELECT 1
		FROM VINCULO V JOIN PET P
		ON V.COD_PET = P.COD_PET JOIN TUTOR T
		ON P.COD_TUTOR = T.COD_TUTOR
		WHERE P.NOME ILIKE NOME_PET 
		AND T.CPF = CPF_TUTOR 
		AND STATUS = TRUE
	) THEN
		RETURN (
			SELECT V.COD_VINCULO
			FROM VINCULO V JOIN PET P
			ON V.COD_PET = P.COD_PET JOIN TUTOR T
			ON P.COD_TUTOR = T.COD_TUTOR
			WHERE P.NOME ILIKE NOME_PET 
			AND T.CPF = CPF_TUTOR 
			AND STATUS = TRUE
		);
	ELSE
		RAISE EXCEPTION 'O vínculo não foi encontrado';
	END IF;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION BUSCAR_COD_ATEND(NOME_ATEND VARCHAR)
RETURNS INT
AS $$
BEGIN
	IF EXISTS (
		SELECT 1
		FROM ATENDENTE
		WHERE NOME ILIKE NOME_ATEND
	) THEN
		RETURN (
			SELECT COD_ATEND
			FROM ATENDENTE
			WHERE NOME ILIKE NOME_ATEND
		);
	ELSE
		RAISE EXCEPTION 'O atendente não foi encontrado';
	END IF;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION BUSCAR_COD_VET(CRMV_VET VARCHAR)
RETURNS INT
AS $$
BEGIN
	IF EXISTS (
		SELECT 1
		FROM VETERINARIO
		WHERE CRMV ILIKE CRMV_VET
	) THEN
		RETURN (
			SELECT COD_VET
			FROM VETERINARIO
			WHERE CRMV ILIKE CRMV_VET
		);
	ELSE
		RAISE EXCEPTION 'O veterinário não foi encontrado';
	END IF;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION BUSCAR_COD_ESP(NOME_ESP VARCHAR)
RETURNS INT
AS $$
BEGIN
	IF EXISTS (
		SELECT 1
		FROM ESPECIALIDADE
		WHERE NOME ILIKE NOME_ESP
	) THEN
		RETURN (
			SELECT COD_ESP
			FROM ESPECIALIDADE
			WHERE NOME ILIKE NOME_ESP
		);
	ELSE
		RAISE EXCEPTION 'A especialidade não foi encontrada';
	END IF;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION BUSCAR_COD_FARM(NOME_FARMACO VARCHAR)
RETURNS INT
AS $$
BEGIN
	IF EXISTS (
		SELECT 1
		FROM FARMACO 
		WHERE NOME ILIKE NOME_FARMACO
	) THEN
		RETURN (
			SELECT COD_FARM
			FROM FARMACO
			WHERE NOME ILIKE NOME_FARMACO
		);
	ELSE
		RAISE EXCEPTION 'O fármaco não foi encontrado';
	END IF;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION BUSCAR_COD_TIPO(NOME_TIPO VARCHAR)
RETURNS INT
AS $$
BEGIN
	IF EXISTS (
		SELECT 1
		FROM TIPO
		WHERE NOME ILIKE NOME_TIPO
	) THEN
		RETURN (
			SELECT COD_TIPO
			FROM TIPO
			WHERE NOME ILIKE NOME_TIPO
		);
	ELSE
		RAISE EXCEPTION 'O tipo não foi encontrado';
	END IF;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION PLANO_PET_JA_CONTRATADO(COD_PET_BUSCADO INT, COD_PLANO_PET_BUSCADO INT)
RETURNS BOOLEAN
AS $$
BEGIN
	IF EXISTS (
		SELECT 1
		FROM VINCULO 
		WHERE COD_PET = COD_PET_BUSCADO 
		AND COD_PLANO_PET = COD_PLANO_PET_BUSCADO
		AND STATUS = TRUE 
	) THEN
		RETURN TRUE;
	ELSE 
		RETURN FALSE;
	END IF;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION PLANO_PET_ATIVO(COD_PET_BUSCADO INT)
RETURNS BOOLEAN
AS $$
BEGIN
	IF EXISTS (
		SELECT 1 
		FROM VINCULO 
		WHERE COD_PET = COD_PET_BUSCADO
	) THEN
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION BUSCAR_DESCONTO_CONSULTA(COD_VINCULO_BUSCADO INT)
RETURNS FLOAT
AS $$
BEGIN
	RETURN (
		SELECT P.DESCONTO_CONSULTA
		FROM VINCULO V JOIN PLANO_PET P
		ON V.COD_PLANO_PET = P.COD_PLANO_PET
		WHERE V.COD_VINCULO = COD_VINCULO_BUSCADO
	);
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION BUSCAR_DESCONTO_VACINACAO(COD_VINCULO_BUSCADO INT)
RETURNS FLOAT
AS $$
BEGIN
	RETURN (
		SELECT P.DESCONTO_VACINACAO
		FROM VINCULO V JOIN PLANO_PET P
		ON V.COD_PLANO_PET = P.COD_PLANO_PET
		WHERE V.COD_VINCULO = COD_VINCULO_BUSCADO
	);
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION BUSCAR_VALOR_CONSULTA(COD_VET_BUSCADO INT)
RETURNS FLOAT
AS $$
BEGIN
	RETURN (
		SELECT VALOR
		FROM ESPECIALIDADE E JOIN VETERINARIO V
		ON E.COD_ESP = V.COD_ESP
		WHERE V.COD_VET = COD_VET_BUSCADO
	);
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION BUSCAR_VALOR_FARMACO(COD_FARM_BUSCADO INT)
RETURNS FLOAT
AS $$
BEGIN
	RETURN (
		SELECT VALOR
		FROM FARMACO
		WHERE COD_FARM = COD_FARM_BUSCADO
	);
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION CALCULAR_VALOR_DESCONTADO(VALOR FLOAT, DESCONTO FLOAT)
RETURNS FLOAT
AS $$
BEGIN
	RETURN ROUND((VALOR - ((VALOR * DESCONTO) / 100))::NUMERIC, 2);
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION CALCULAR_VALOR_PARCELA(VALOR_TOTAL FLOAT, QUANT_PARCELAS INT)
RETURNS FLOAT
AS $$
BEGIN
	RETURN ROUND((VALOR_TOTAL / QUANT_PARCELAS)::NUMERIC , 2);
END;
$$ LANGUAGE PLPGSQL;